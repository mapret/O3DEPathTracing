#include <Atom/Features/RayTracing/RayTracingSrgs.azsli>

#include <Atom/Features/FallbackPBRMaterial/MaterialInfoUtil.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/RayTracing/RayTracingSceneUtils.azsli>

#include "PathTracingCommon.azsli"

void ApplyIBL(RayTracingSurfaceData surfaceData, inout float3 diffuseColor)
{
  float sceneIblExposure = pow(2.f, SceneSrg::m_iblExposure);
  float3 irradianceDir = MultiplyVectorQuaternion(surfaceData.m_normal, SceneSrg::m_iblOrientation);
  float3 diffuseSample = SceneSrg::m_diffuseEnvMap.SampleLevel(SceneSrg::m_samplerEnv, GetCubemapCoords(irradianceDir), 0).rgb;
  diffuseColor += diffuseSample * surfaceData.m_albedo * surfaceData.m_diffuseResponse * sceneIblExposure;
}

[shader("closesthit")]
void ClosestHit(inout PayloadData payload, BuiltInTriangleIntersectionAttributes attrib)
{
  VsInput vertexData = GetHitInterpolatedVertexData(InstanceID(), PrimitiveIndex(), attrib.barycentrics);

  MaterialInfo materialInfo;
  GetMaterialInfoEntry(InstanceID(), materialInfo);

  TextureData textureData = GetFallbackPBRMaterialTextureData(materialInfo, RayTracingGlobalSrg::LinearSampler, vertexData.uv0);

  payload.m_hitPosition = mul(ObjectToWorld3x4(), float4(vertexData.position, 1.f));
  payload.m_hitNormal = normalize(mul(WorldToObject4x3(), vertexData.normal));
  payload.m_hitAlbedo = textureData.m_baseColor.xyz;
  payload.m_hitEmissive = textureData.m_emissiveColor;
}
