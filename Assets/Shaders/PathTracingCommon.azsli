#pragma once

#include <Atom/Features/PBR/Microfacet/Brdf.azsli>

struct PayloadData
{
  float m_hitT;
  float3 m_color;
};

struct RayTracingSurfaceData
{
  RaytracingAccelerationStructure m_scene;
  float3 m_worldPosition;
  float3 m_normal;
  float3 m_albedo;
  float m_diffuseResponse;
};

void ApplyDirectionalLight(RayTracingSceneSrg::DirectionalLight light,
                           RayTracingSurfaceData surfaceData,
                           inout float3 diffuseColor)
{
  RayDesc lightRay;
  lightRay.Origin = surfaceData.m_worldPosition + surfaceData.m_normal * 0.01f;
  lightRay.Direction = normalize(-light.m_direction);
  lightRay.TMin = 0.f;
  lightRay.TMax = 1e20f;
  PayloadData lightRayPayload = (PayloadData)0;
  TraceRay(surfaceData.m_scene,
           RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER,
           0xFF,
           0,
           1,
           0,
           lightRay,
           lightRayPayload);

  if (lightRayPayload.m_hitT < 0.f)
  {
    diffuseColor +=
      DiffuseLambertian(
        surfaceData.m_albedo, surfaceData.m_normal, normalize(-light.m_direction), surfaceData.m_diffuseResponse) *
      light.m_rgbIntensity;
  }
}
